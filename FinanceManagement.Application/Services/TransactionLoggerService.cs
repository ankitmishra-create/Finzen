using FinanceManagement.Application.Interfaces;
using FinanceManagement.Core.Entities;
using FinanceManagement.Infrastructure.Interface;
using FinanceManagement.Infrastructure.Persistence.Repositories.InterfaceRepository;

namespace FinanceManagement.Application.Services
{
    public class TransactionLoggerService : ITransactionLoggerService
    {
        private readonly ILoggedInUser _loggedInUser;
        private readonly IUnitOfWork _unitOfWork;
        private readonly ITransactionService _transactionService;
        public TransactionLoggerService(ILoggedInUser loggedInUser, IUnitOfWork unitOfWork, ITransactionService transactionService)
        {
            _loggedInUser = loggedInUser;
            _unitOfWork = unitOfWork;
            _transactionService = transactionService;
        }
        public async Task<List<TransactionLog>> DeletedTransactionLogs()
        {
            var sevenDaysLaterDate = DateTime.UtcNow.AddDays(7);
            var userId = _loggedInUser.CurrentLoggedInUser();
            var userLast7DaysTransactions = await _unitOfWork.TransactionLog.GetAllAsync(t => t.UserId == userId
            && t.ActionPerformed == Core.Enums.ActionPerformed.Deleted
            && t.ActionDate <= sevenDaysLaterDate);
            return userLast7DaysTransactions.OrderByDescending(t => t.TransactionDate).ThenByDescending(t => t.Amount).ToList();
        }

        private async Task<Transaction> CreateTransaction(TransactionLog deletedTransaction)
        {
            Transaction transaction = new Transaction
            {
                UserId = deletedTransaction.UserId,
                CategoryId = deletedTransaction.CategoryId,
                TransactionTerrority = deletedTransaction.TransactionTerrority,
                SelectedCurrency = deletedTransaction.SelectedCurrency,
                TransactionTimeLine = deletedTransaction.TransactionTimeLine,
                RecurrenceFrequency = deletedTransaction.RecurrenceFrequency,
                Amount = deletedTransaction.Amount,
                OriginalAmount = deletedTransaction.OriginalAmount,
                OriginalCurrency = deletedTransaction.OriginalCurrency,
                Description = deletedTransaction.Description,
                TransactionDate = deletedTransaction.TransactionDate,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = deletedTransaction.UpdatedAt,
                GeneratedFromRecurringId = deletedTransaction.GeneratedFromRecurringId,
                IsAutoGenerated = deletedTransaction.IsAutoGenerated
            };
            await _unitOfWork.Transaction.AddAsync(transaction);
            return transaction;
        }

        public async Task<Transaction> RecoverDeletedTransaction(Guid transactionLogId)
        {
            var deletedTransaction = await _unitOfWork.TransactionLog.GetPopulatedAsync(r => r.TransactionLogId == transactionLogId);
            var transaction = await CreateTransaction(deletedTransaction);
            _transactionService.TransactionLog(transaction, Core.Enums.ActionPerformed.Created);
            await _unitOfWork.SaveAsync();
            return transaction;
        }
    }
}
