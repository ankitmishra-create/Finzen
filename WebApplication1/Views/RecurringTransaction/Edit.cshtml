@model FinanceManagement.Application.ViewModels.AddTransactionVM
@using FinanceManagement.Core.Enums
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Edit Transaction";

    var categoryTypes = Enum.GetValues(typeof(CategoryType))
                            .Cast<CategoryType>()
                            .Select(e => new SelectListItem { Value = e.ToString(), Text = e.ToString() })
                            .ToList();
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-7">
            <div class="card shadow-sm rounded-3 border-0">
                <div class="card-body p-4 p-md-5">
                    <h3 class="card-title text-center mb-4 fw-bold">Edit Transaction</h3>

                    <form asp-controller="Transaction" asp-action="Edit" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3" role="alert"></div>

                        <input type="hidden" asp-for="UserId" />
                        <input type="hidden" asp-for="TransactionId" />

                        <div class="row">
                            <!-- Territory Dropdown -->
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <select asp-for="TransactionTerrority"
                                            asp-items="Html.GetEnumSelectList<TransactionTerrority>()"
                                            class="form-select"
                                            id="territorySelect">
                                    </select>
                                    <label asp-for="TransactionTerrority" class="required-field"></label>
                                </div>
                                <span asp-validation-for="TransactionTerrority" class="text-danger small"></span>
                            </div>

                            <!-- Currency Dropdown (shown only for International) -->
                            <div class="col-md-6" id="currencyContainer" style="display:none;">
                                <div class="form-floating mb-3">
                                    <select asp-for="TransactionCurrency"
                                            class="form-select"
                                            asp-items="ViewBag.Available">
                                        <option value="">-- Select Currency --</option>
                                    </select>
                                    <label asp-for="TransactionCurrency" class="required-field"></label>
                                </div>
                                <span asp-validation-for="TransactionCurrency" class="text-danger small"></span>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Amount -->
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="Amount" class="form-control" placeholder="Amount" />
                                    <label asp-for="Amount" class="required-field"></label>
                                </div>
                                <span asp-validation-for="Amount" class="text-danger small"></span>
                            </div>
                            <!-- Transaction Date -->
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="TransactionDate" type="date" class="form-control"
                                           max="@DateTime.Today.ToString("yyyy-MM-dd")" placeholder="Transaction Date" />
                                    <label asp-for="TransactionDate" class="required-field"></label>
                                </div>
                                <span asp-validation-for="TransactionDate" class="text-danger small"></span>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Category Type -->
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <select asp-for="CategoryType" class="form-select" id="categoryTypeDropdown" asp-items="categoryTypes"></select>
                                    <label asp-for="CategoryType" class="required-field"></label>
                                </div>
                                <span asp-validation-for="CategoryType" class="text-danger small"></span>
                            </div>
                            <!-- Category Selection -->
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <select asp-for="CategoryId" class="form-select" id="categorySelect">
                                        <option value="">-- Select Category --</option>
                                        @if (Model.Categories != null && Model.Categories.Any())
                                        {
                                            foreach (var category in Model.Categories)
                                            {
                                                <option value="@category.CategoryId"
                                                        data-type="@category.CategoryType">
                                                    @category.CategoryName
                                                </option>
                                            }
                                        }
                                    </select>
                                    <label asp-for="CategoryId" class="required-field"></label>
                                </div>
                                <span asp-validation-for="CategoryId" class="text-danger small"></span>
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="form-floating mb-3">
                            <textarea asp-for="Description" class="form-control" placeholder="Description" style="height: 100px"></textarea>
                            <label asp-for="Description" id="descriptionLabel"></label>
                        </div>
                        <span asp-validation-for="Description" class="text-danger small"></span>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                            <a asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // --- Territory / Currency ---
            const territorySelect = document.getElementById("territorySelect");
            const currencyContainer = document.getElementById("currencyContainer");
            const currencySelect = currencyContainer.querySelector("select");

            function updateCurrencyVisibility() {
                const selectedOptionText = territorySelect.options[territorySelect.selectedIndex].text;
                if (selectedOptionText === "International") {
                    currencyContainer.style.display = "block";
                    currencySelect.setAttribute("required", "required");
                } else {
                    currencyContainer.style.display = "none";
                    currencySelect.removeAttribute("required");
                }
            }

            // This event listener ONLY clears the value when the user changes the selection.
            territorySelect.addEventListener("change", function() {
                updateCurrencyVisibility();
                const selectedOptionText = this.options[this.selectedIndex].text;
                if (selectedOptionText !== "International") {
                    if(currencySelect) currencySelect.value = "";
                }
            });

            // Run on page load to set initial state WITHOUT clearing the value.
            updateCurrencyVisibility();


            // --- Category Filter & Description Requirement ---
            const typeSelect = document.getElementById('categoryTypeDropdown');
            const categorySelect = document.getElementById('categorySelect');
            const descriptionLabel = document.getElementById('descriptionLabel');

            // Store the original options on page load before they are filtered
            const allCategoryOptions = Array.from(categorySelect.options);

            // Capture the pre-selected category ID from the model
            const initialCategoryId = "@Model.CategoryId";

            function filterCategories() {
                const selectedType = typeSelect.value;

                // Keep track of the currently selected category before clearing
                const previouslySelectedCategory = categorySelect.value;

                // Clear the select, but keep the placeholder
                categorySelect.innerHTML = '<option value="">-- Select Category --</option>';

                allCategoryOptions.forEach(option => {
                    // Skip the placeholder option we store initially
                    if (!option.value) return;

                    // If the type matches (or no type is selected), add it back
                    if (!selectedType || option.getAttribute('data-type') === selectedType.toString()) {
                        categorySelect.appendChild(option.cloneNode(true));
                    }
                });

                // Attempt to re-select the category that was selected before filtering
                // This preserves the selection when the user changes the type back and forth
                const newOptionSet = Array.from(categorySelect.options).map(opt => opt.value);
                if (newOptionSet.includes(previouslySelectedCategory)) {
                    categorySelect.value = previouslySelectedCategory;
                }
            }

            function toggleDescriptionRequirement() {
                if (typeSelect.value === 'Expense') {
                    descriptionLabel.classList.add('required-field');
                } else {
                    descriptionLabel.classList.remove('required-field');
                }
            }

            typeSelect.addEventListener('change', function () {
                filterCategories();
                toggleDescriptionRequirement();
            });

            // --- Initial Setup on Page Load ---

            // 1. Filter categories based on the initial CategoryType from the model
            filterCategories();

            // 2. Explicitly set the CategoryId dropdown to match the model's value
            if (initialCategoryId) {
                categorySelect.value = initialCategoryId;
            }

            // 3. Set the description requirement based on the initial type
            toggleDescriptionRequirement();
        });
    </script>
}
